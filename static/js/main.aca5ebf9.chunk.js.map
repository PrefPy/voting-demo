{"version":3,"sources":["components/footer/Footer.js","components/inputslider/InputSlider.js","components/startform/StartForm.js","components/tutorialsection/TutorialSection.js","components/applyrule/ApplyRule.js","components/simresult/SimResult.js","components/simuoutput/SimuOutput.js","pages/startpage/StartPage.js","components/adminsettings/adminsettings.js","App.js","components/loadspinner/LoadSpinner.js","index.js"],"names":["Footer","className","target","href","rel","InputSlider","props","useState","value","val","setVal","update","v","onChange","span","name","min","max","step","allinputs","type","inputs","field","label","info","required","detail","Title","Typography","Text","StartForm","undefined","setSimuInput","simuInput","console","log","makedom","inp","Group","vals","map","Button","level","layout","initialValues","labelCol","wrapperCol","style","width","labelAlign","onFinish","onSubmit","group","Item","rules","message","tooltip","justify","align","marginBottom","htmlType","onClick","TutorialSection","expandAbstract","expandIntro","state","setState","textAlign","Dragger","Upload","apply_button","Select","Option","preset_rules","ApplyRule","showmodal","userinput","showinstruction","setstate","setuserinput","newvals","uploader","multiple","action","accept","beforeUpload","file","reader","FileReader","onload","e","filetype","split","preference_profile","raw_data","result","readAsText","triggerInstruction","instructionOptions","title","footer","onCancel","visible","whiteSpace","InboxOutlined","names","chosen_trad_rules","rulename","chosen_learned_rules","alert","trackPromise","axios","post","settings","server","then","res","setPopupState","showPopup","resultData","data","SimResult","tabledata","columns","col","rows","row","box","strong","remark","l","SimuOutput","privacy_vals","output","o","i","privacy","length","options","optionType","buttonStyle","leanred_models","learned_models","marginTop","StartPage","showError","outputType","errorModalOptions","JSON","stringify","display","setOutputType","App","setSettings","LoadSpinner","usePromiseTracker","promiseInProgress","color","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aca5ebf9.chunk.js","sourcesContent":["import './Footer.css'\n\nexport default function Footer() {\n    return(\n        <div className=\"Footer\">\n            <div>\n                Built by: Prof. <a target=\"_blank\" href=\"http://cs.rpi.edu/~xial\" rel=\"noopener noreferrer\">Lirong Xia</a>'s Group\n            </div>\n            <div>\n                <a target=\"_blank\" href=\"https://icons8.com/icon/KwJ_oShFEoN7/elections\" rel=\"noopener noreferrer\">Elections</a> icon by <a target=\"_blank\" href=\"https://icons8.com\" rel=\"noopener noreferrer\">Icons8</a>\n            </div>\n        </div>\n    )\n}","import { useState } from 'react';\nimport { Row, Col, Slider, InputNumber } from 'antd';\n\nconst InputSlider = props => {\n    const [val,setVal] = useState(props.value)\n\n    const update = v =>{\n        props.onChange(v)\n        setVal(v)\n    }   \n    return(\n        <Row>\n            <Col span={12}>\n                <Slider \n                    name={props.name}\n                    min={props.min} \n                    max={props.max} \n                    step={props.step} \n                    value={val} \n                    onChange={update}/>\n            </Col>\n            <Col span={5}>\n                <InputNumber \n                    name={props.name}\n                    min={props.min} \n                    max={props.max} \n                    step={props.step} \n                    value={val} \n                    onChange={update}/>\n            </Col>\n        </Row>\n    )\n}\n\nexport default InputSlider","import './StartForm.css';\nimport { Input, Form, Radio, Button, Row, Typography,Col } from 'antd';\nimport InputSlider from '../inputslider/InputSlider';\nimport { useState } from 'react';\n\n\nconst allinputs = [\n    {\n        type: 'Simulation input',\n        inputs:[{   \n            field: 'no_candidates',  \n            label: 'Number of Candidates',               \n            info: 'Different number of candidates will lead to design of different voting rules',\n            required:true,\n            detail: {\n                type: 'slider',\n                min: 2,\n                max: 4,\n                step: 1\n            }\n        }, {\n            field: 'group_ratio',\n            label: 'Group Ratio',\n            info: 'Group fairness is computed in terms of group sizes, please enter ratio between the sizes of two groups as (smaller group size)/(larger group size)',\n            required:true,\n            detail: {\n                type: 'slider',\n                min: 0.01,\n                max: 1,\n                step: 0.01\n            }\n        }]}, {\n        type: 'Desired axioms',\n        inputs:[{\n            field: 'gr_fair_req',\n            label: 'Group Fairness Requirement',\n            info: 'Real number between 0~1. Average group-imbalance based fairness value. Calculated using average rank utility of both groups. Higher value means more fairness.',\n            required:false,\n            detail: {\n                type: 'slider',\n                min: 0.01,\n                max: 1.00,\n                step: 0.01\n            }\n        }, {\n            field: 'conc_eff_req',\n            label: 'Condorcet Efficiency Requirement',\n            info: 'Real number between 0~1. Fraction of preference profiles where Condorcet winner is chosen if it exists. Higher value means more probability of choosing the Condorcet winner.',\n            required: false,\n            detail: {\n                type: 'slider',\n                min: 0.01,\n                max: 1.00,\n                step: 0.01\n            }\n        }, {\n            field: 'consistency',\n            label: 'Consistency Requirement',\n            info: 'Real number between 0~1. Higher value means higher probability that the voting rule will satisfy the consistency property',\n            required: false,\n            detail: {\n                type: 'slider',\n                min: 0.01,\n                max: 1.00,\n                step: 0.01\n            }\n        }, {\n            field: 'neutrality',\n            label: 'Neutrality Requirement',\n            info: 'Real number between 0~1. Higher value means higher probability that the voting rule will satisfy the neutrality property.',\n            required: false,\n            detail: {\n                type: 'slider',\n                min: 0.01,\n                max: 1.00,\n                step: 0.01\n            }\n        }, {\n            field: 'monotonicity',\n            label: 'Monotonicity Requirement',\n            info: 'Real number between 0~1. Higher value means higher probability that the voting rule will satisfy the monotonicity property',\n            required: false,\n            detail: {\n                type: 'slider',\n                min: 0.01,\n                max: 1.00,\n                step: 0.01\n            }\n        },\n        //  {\n        //     field: 'privacy_req',\n        //     label: 'Privacy Requirement',\n        //     info: 'To design a locally differential private mechanism, noise is added to each voter’s vote. High privacy requirement causes higher noise, low privacy requirement causes lower noise.',\n        //     required: false,\n        //     detail:{\n        //         type: 'radio',\n        //         vals: ['low','mid','high']\n        //     }\n        // }\n        // ,{\n        //     field: 'sim_runtime',\n        //     label: 'Learned rule accuracy',\n        //     info: 'Determines the size of the synthetic dataset created to learn new rules. Low accuracy corresponds to smaller dataset and fast runtime. High accuracy corresponds to larger dataset and slower runtime.',\n        //     required: false,\n        //     detail: {\n        //         type: 'radio',\n        //         vals: ['short','mid','long']\n        //     },\n        // }\n        ]}\n]\n\nconst {Text,Title} = Typography\n\nconst StartForm = props => {\n    const update = (value,field) => {\n        if(value.target !== undefined)\n            value = value.target.value\n        \n        props.setSimuInput({...props.simuInput, [field]:value})\n        console.log(props.simuInput)\n    }\n\n    const setTraditional = () => {\n        props.setSimuInput({...props.simuInput, 'output-type':'traditional'})\n    }\n\n    const setLearnedRules = () => {\n        props.setSimuInput({...props.simuInput, 'output-type':'learned'})\n    }\n\n    const makedom = inp => {  \n        switch(inp.detail.type){\n            case 'slider':\n                return(\n                    <InputSlider \n                        name={inp.field} \n                        min={inp.detail.min} \n                        max={inp.detail.max}\n                        step={inp.detail.step}\n                        onChange={v => update(v,inp.field)}/>\n                )\n            case 'radio':\n                return(\n                    <Radio.Group name={inp.field} onChange={v =>update(v,inp.field)}>\n                        {inp.detail.vals.map(val=>(\n                            <Radio.Button value={val} key={val}>{val}</Radio.Button>\n                        ))}\n                    </Radio.Group>\n                )  \n            default: return(null)\n        }\n    }\n    \n    return(\n        <div className=\"StartForm\">\n            <Title level={3}>Designing Voting Rules</Title>\n            <div className=\"instruction\">\n                Choose required property for new voting rules (<star>*</star> marked fields are required)\n            </div>\n            <Form\n                layout=\"horizontal\"\n                initialValues={props.simuInput}\n                labelCol={{span:12}}\n                wrapperCol={{span:20}}\n                style={{width:\"90%\"}}\n                labelAlign=\"left\"\n                onFinish={props.onSubmit}\n                >\n                {\n                    allinputs.map(group => (\n                        <div className=\"inputgroup\">\n                            <div className=\"title\">{group.type}</div>\n                            {group.inputs.map(inp=>\n                                <Form.Item \n                                    label={inp.label} \n                                    name={inp.field} \n                                    key={inp.field}\n                                    rules={inp.required ? [{required:true, message:'Please input a value!'}] : []}\n                                    tooltip={inp.info}>\n                                    {makedom(inp)}\n                                </Form.Item>)}\n                        </div>\n                    \n                    ))\n                }\n                <Row type=\"flex\" justify=\"center\" align=\"middle\" style={{marginBottom:10}}>\n                    <Col span={10}>\n                        <Button type=\"primary\" htmlType=\"submit\" onClick={setTraditional}>Check Traditional Output</Button>\n                    </Col>\n                    <Col span={10}>\n                        <Button type=\"primary\" htmlType=\"submit\" onClick={setLearnedRules}>Generate Voting Rule</Button>\n                    </Col>\n                </Row>\n            </Form>\n        </div>\n    )\n}\n\n\nexport default StartForm","import './TutorialSection.css'\nimport { Button } from 'antd'\nimport { useState } from 'react'\n\nconst TutorialSection = () => {\n    const [state,setState] = useState({expandAbstract:false,expandIntro:true})\n\n    const toggleAbstract = () =>{setState({...state,expandAbstract:!state.expandAbstract})}\n    const toggleIntro = () => {setState({...state,expandIntro:!state.expandIntro})}\n\n    return(\n        <div className='TutorialSection'>\n            <div className={`intro-body ${state.expandIntro ? 'expanded' : 'collapsed'}`}>\n                <h1 style={{textAlign:'center'}}><b>MLVR</b> - Machine Learning based design of Voting Rules</h1>\n                <div className=\"main-content\">\n                    <h3><b>Introduction</b></h3>\n                    This demo demonstrates our framework to find voting rules that match the given constraints using machine learning. \n                    We showcase a number of axioms that are both traditional and new that our framework can satisfy, such as traditional condorcet efficiency, consistency requirement, and some new axioms such as group fairness.  \n                </div>\n                <Button onClick={toggleIntro} type=\"link\">\n                    {state.expandIntro ? 'Minimize introduction' : 'Expand introduction'}\n                </Button>\n                    \n            </div>\n\n            <div className={`intro-detail ${state.expandAbstract ? 'expanded' : 'collapsed'}`}>\n                <Button onClick={toggleAbstract} type=\"link\">\n                    {state.expandAbstract ? 'Minimize abstract' : 'Expand full abstract'}\n                </Button>\n                <div \n                    // style={{display:state.expandAbstract ? 'block' : 'none'}} \n                    className=\"abstract-body\">\n                    We define a novel notion of group imbalance-based fairness in voting, and see that traditional voting rules are efficient yet unfair in average [1]. Furthermore, fully fair rules would be highly inefficient. Our goal is to be able to design new voting rules with varying levels of fairness and efficiency. We are considering group-imbalance based fairness for two groups and Condorcet efficiency as an efficiency measure. Additionally, we can choose the level of privacy (in terms of local differential privacy) that is required. Once we define the number of candidates, the ratio between group sizes and fairness, efficiency and privacy requirements, a data driven framework will design new voting rules to satisfy the requirements. It will also show a comparison with popular existing voting rules.\n                    <div className=\"references\">\n                        <b>References:</b>\n                        [1] Mohsin, F., Liu, A., Chen, P.Y., Rossi, F., and Xia, L. <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://drive.google.com/file/d/12bb5i_T9TtOEgyOvQlSk5KmWu2JNdRAi/view?usp=sharing\" >\"Learning to Design Fair and Private Voting Rules.\"</a>, To be presented at the AI For Social Good Workshop (AI4SG), 30th International Joint Conference on Artificial Intelligence (IJCAI-21). 2021.\n                    </div>\n                </div>                \n            </div>\n            {/* <Button className=\"hidetutorial\" type=\"link\" onClick={setHideIntro}><CaretUpOutlined style={{fontSize:'200%'}}/></Button> */}\n        </div>\n    )\n}\n\nexport default TutorialSection","import { Upload, Select, Button, Checkbox, Col, Modal, Typography } from 'antd'\nimport { InboxOutlined } from '@ant-design/icons'\nimport { useState } from 'react'\nimport { trackPromise } from 'react-promise-tracker'\nimport axios from 'axios'\n\nimport './ApplyRule.css'\n\nconst { Dragger } = Upload;\nconst { Option } = Select;\n\nconst apply_button = {\n    type: 'primary',\n    style: { width: \"100%\" },\n}\n\nconst { Text } = Typography\n\nconst instruction_text = `line 1: number of candidates, m\nline 2: number of agents in group 1, n1\nline 3: ranking of agent 1 in group 1 (ranking is a permutation of [0,...,m-1]. e.g. for m=4, '''0 3 2 1''' is a ranking meaning 0>3>2>1\n...\nline n1+2: ranking of agent n1 in group 1\nline n1+3: number of agents in group 2, n2\nline n1+4: ranking of agent 1 in group 2\n...\nline n1+n2+3: ranking of agent n2 in group 2`\n\nconst preset_rules = [\"Borda\", \"STV\", \"Copeland\", \"Maximin\"]\n\nconst example_link = 'https://gist.githubusercontent.com/inwonakng/9a214e9380aa95d816da3526592c2023/raw/'\n\nconst ApplyRule = props => {\n    // const [state.userinput,setUserInput] = useState({showinstruction:false})\n    const [state, setstate] = useState({ showmodal:false, userinput: false, showinstruction: false })\n\n    const setuserinput = newvals => {\n        setstate({ ...state, userinput: { ...state.userinput, ...newvals } })\n    }\n\n    const showmodal = () => {\n        setstate({...state,showmodal:true})\n    }\n\n    const handleclose = () => {\n        setstate({...state,showmodal:false})\n    }\n\n    const uploader = {\n        name: 'file',\n        multiple: false,\n        action: '',\n        accept: '.txt, .csv',\n        beforeUpload: file => {\n            const reader = new FileReader()\n            reader.onload = e => {\n                const filetype = file.name.split('.')[1]\n                // setstate({...state,userinput:{...state.userinput,type:filetype,raw_data:e.target.result}})\n                setuserinput({ preference_profile: { type: filetype, raw_data: e.target.result } })\n            }\n            reader.readAsText(file);\n            return false;\n        }\n    };\n\n    const choose_learned = rulename => {\n        const raw_data = props.learned_models.find(o => o.name === rulename).raw_data\n        setuserinput({ chosen_learned_rules: { name: rulename, raw_data: raw_data } })\n    }\n\n    const choose_trad = names => {\n        setuserinput({ chosen_trad_rules: names })\n    }\n\n    const showPopup = () => {\n        if (state.userinput.chosen_learned_rules === undefined) {\n            alert('Please choose a learned rule to apply!')\n            return false\n        }\n        if (state.userinput.preference_profile === undefined) {\n            alert('Please upload a preference profile!')\n            return false\n        }\n\n        trackPromise(\n            axios.post(`${props.settings.server}/apply_rule`, state.userinput).then(\n                res => {\n                    console.log('passing this')\n                    console.log(res)\n                    props.setPopupState({ showPopup: true, resultData: res.data })\n                }\n            )\n        )\n        // props.setPopupState({showPopup:true,data:\"something something!\"})\n    }\n\n    const triggerInstruction = () => {\n        setuserinput({ showinstruction: !state.showinstruction })\n    }\n\n    const instructionOptions = {\n        title: 'Input format instrtuction',\n        footer: null,\n        onCancel: triggerInstruction,\n        visible: state.showinstruction\n    }\n\n    return (\n        <>\n            <>\n                <Text style={{marginBottom:10}}>\n                    Click this button to view the results of the displayed voting rules with your own data!\n                </Text>\n                <Button onClick={showmodal} >Apply Voting Rule</Button>\n            </>\n            <Modal visible={state.showmodal} onCancel={handleclose} footer={null}>\n                <div className=\"upload-zone\">\n                    <h2>Import a preference profile</h2>\n                    <div className=\"example\">\n                        An example file is available <a type=\"download\" href={example_link} target=\"_blank\" rel=\"noopener noreferrer\">here</a>\n                        <br></br>\n                        For a description of the file format, click <a onClick={triggerInstruction} > here</a>\n                        <Modal {...instructionOptions}>\n                            <div style={{ whiteSpace: 'pre-line' }}>\n                                {instruction_text}\n                            </div>\n                        </Modal>\n                    </div>\n                    <Dragger {...uploader}>\n                        <p className=\"ant-upload-drag-icon\">\n                            <InboxOutlined />\n                        </p>\n                        <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\n                        <p className=\"ant-upload-hint\">\n                            Only supports csv or txt files\n                        </p>\n                    </Dragger>\n                </div>\n                <div className=\"apply-zone\">\n                    <h2>Choose a voting rule to apply</h2>\n                    <div className=\"preset-rules\">\n                        <Checkbox.Group onChange={choose_trad} style={{ width: '100%' }}>\n                            {preset_rules.map(rulename =>\n                                // <CheckboxButton label={rulename} value=\"traditional\" />\n                                <Col>\n                                    <Checkbox className=\"checkboxButton\" value={rulename} key={rulename}>{rulename}</Checkbox>\n                                </Col>\n                            )}\n                        </Checkbox.Group>\n                    </div>\n                    {/* <Select defaultValue=\"Choose from learned rules\" className=\"choose-learned-rule\" onSelect={choose_learned}>\n                        {props.learned_models.map(rule => <Option value={rule.name} key={rule.name}>{rule.name}</Option>)}\n                    </Select> */}\n                    <Button className=\"apply-button\" {...apply_button} onClick={showPopup} >Apply Voting Rules</Button>\n                </div>\n            </Modal>\n        </>\n    )\n}\n\nexport default ApplyRule","import './SimResult.css';\nimport 'antd/dist/antd.css';\nimport { Typography } from 'antd';\n\nconst { Text,Title } = Typography\n\nconst SimResult = props => {\n\n\tconsole.log(props.resultData)\n\treturn (\n\t\t<div className=\"voting-result\">\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr className=\"theader\">\n\t\t\t\t\t\t{props.resultData.tabledata.columns.map(col=><th key={col}>{col}</th>)}\n\t\t\t\t\t</tr>\n\t\t\t\t\t{ props.resultData.tabledata.rows.map(row=>(\n\t\t\t\t\t\t<tr key={ row[0] }>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trow.map(box => <td key={row[0]+box}>{ box }</td>)\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t))}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<div className=\"remark\">\n\t\t\t\t<Text strong={true}>Remark: </Text> \n\t\t\t\t<div>\n\t\t\t\t\t{props.resultData.tabledata.remark.split('\\n').map( l =>\n\t\t\t\t\t\t<p>{l}</p>\n\t\t\t\t\t)}\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default SimResult","import { useState } from 'react'\nimport { Typography, Radio, Button } from 'antd'\nimport ApplyRule from '../applyrule/ApplyRule'\n\nimport SimResult from '../simresult/SimResult.js'\n\nimport './simuoutput.css'\n\nconst { Title, Text } = Typography\n\nconst names = {\n    'Traditional Rules': 'traditional',\n    'Learned Rules':'learned',\n}\n\nconst SimuOutput = props => {\n    const privacy_vals = props.output.map((o,i) => ({label:o.privacy,value:i}))\n\n    const [state, setstate] = useState({privacy:0});\n\n    const onPrivacyChange = e => {\n        setstate({...state,privacy:e.target.value})\n    }\n    \n    return(\n        <div className=\"SimuOutput\">\n            <Title level={3}>Generation output</Title>\n            <Title level={5}>\n                {props.output ?\n                    props.output.length > 1 ? \n                        \"Values for different privacy values\"\n                        : \n                        \"Values for traditional voting rules\"\n                    :''}\n            </Title>\n            {props.output && props.output.length === 1 ? \n            <Text>Adding more input will update the table with more results!</Text>:''}\n            <div className=\"maincontent\">\n                <div className=\"choose-table\">\n                    {/* {props.output.length > 0 ?\n                        <Radio.Group\n                            options={Object.keys(names)}\n                            onChange={onRuleChange}\n                            value={state.ruledisplay}\n                            optionType=\"button\"\n                            buttonStyle=\"solid\"\n                            />:''} */}\n                    {privacy_vals.length > 1 ? \n                        <Radio.Group\n                            options={privacy_vals}\n                            onChange={onPrivacyChange}\n                            value={state.privacy}\n                            optionType=\"button\"\n                            buttonStyle=\"solid\"\n                            />:''}\n                </div>\n                { props.output.length > 0 ?\n                    <>\n                        <SimResult resultData={props.output[state.privacy]}/>\n                        {privacy_vals.length > 1 ?\n                            <ApplyRule leanred_models={props.learned_models} simuInput={props.simuInput} style={{marginTop:20}}/>\n                        :''}\n                    </>\n                    : \n                    <div className=\"startmessage\">\n                        {`No input loaded yet.\n                        Press the Generate Voting Rule button to reload the sample output!`}\n                    </div>\n                }\n            </div>\n            \n        </div>  \n    )\n}\n\nexport default SimuOutput;","import { useState } from 'react';\nimport axios from 'axios'\nimport { trackPromise } from 'react-promise-tracker'\n// import { server } from '../../App'\nimport { Modal } from 'antd'\n\nimport StartForm from '../../components/startform/StartForm'\nimport TutorialSection from '../../components/tutorialsection/TutorialSection'\nimport SimuOutput from '../../components/simuoutput/SimuOutput';\nimport AdminSettings from '../../components/adminsettings/adminsettings';\n\nimport './StartPage.css';\n\nconst resultData = {\n    'privacy': 'mid',\n    'tabledata':{\n        'columns': ['Voting Rule','Condorcet Efficiency','Group Fairness'],\n        'rows': {\n            'traditional': [\n                ['Copeland',    '1.00',     0.93],\n                ['Maximin',     '1.00',     0.82],\n                ['Borda',       0.92,     0.87],\n            ],\n            'learned': [\n                ['LVR1',        0.87,     0.98 ],\n                ['LVR2',        0.82,     0.93 ],\n            ],\n        },\n        'remark': 'Mid privacy results.\\n and a newline'\n    }\n}\n\nconst learned_models = [\n        {name: 'LVR1',\n        type:'xgboost',\n        raw_data:''},\n        {name: 'LVR2',\n        type:'xgboost',\n        raw_data:''}\n]\n\nconst StartPage = props => {\n    const [state,setState] = useState({showError:false,result:[],learned_models:[],outputType:'traditional'})\n\n    const setOutputType = val =>{\n        setState({...state,outputType:val})\n    }\n\n    const setSimuInput = data => {\n        setState({...state,simuInput:data})\n    }\n\n\n    const onSubmit = () => {\n        console.log(`sending ${JSON.stringify(state.simuInput)}`)\n        console.log(`${props.settings.server}/run_sim`)\n        \n        trackPromise(\n                    axios.post(`${props.settings.server}/run_sim`,state.simuInput).then(res=>{\n                        console.log('got this in  return')\n                        console.log(res.data.display)\n                        if(res.data.display !== undefined){\n                            setState({...state,result:res.data.display})\n                        }else{\n                            console.log(res.data)\n                            setState({...state,showError:true})\n                        }\n\n                        //     props.history.push({pathname:'/result',state:{resultData:res.data, simuInput:simuInput}})\n                        // else\n                        //     setSimuInput({...simuInput,showError:true})\n                    })\n                )\n    }\n\n    const errorModalOptions = {\n        title:'Message',\n        footer:null,\n        onCancel: () => {\n            setState({...state,showError:false})\n        },\n        visible:state.showError\n    }\n\n    return(\n        <div className=\"StartPage\">\n            {/* <AdminSettings settings={props.settings} setSettings={props.setSettings} /> */}\n            <TutorialSection />\n            <div className=\"simulation-area\">\n                <StartForm onSubmit={onSubmit} simuInput={state.simuInput} setSimuInput={setSimuInput} setOutputType={setOutputType}/>\n                <SimuOutput simuInput={state.simuInput} output={state.result} learned_models={state.learned_models}/>\n            </div>\n            <Modal {...errorModalOptions}>\n                Something bad happened! Check server logs\n            </Modal>\n        </div>\n    )\n}\n\nexport default StartPage\n","import { Row,Col, Modal,Radio,Typography } from 'antd'\nimport { useState} from 'react'\n\nimport './adminsettings.css'\n\nconst { Text } = Typography\n\nconst AdminSettings = props => {\n    // const [modalState,setModalState] = useState({visible:true})\n    const [state,setstate] = useState({modalvisible:true,settings:props.settings})\n    const onChange = (key,e) => {\n        setstate({...state,settings:{...state.settings,[key]:e.target.value}})\n    }\n\n    const handleClose = () => {\n        props.setSettings(state.settings)\n        setstate({...state,modalvisible:false})\n    }\n\n    const serveroptions = [\n                            {\n                                label:'local',\n                                value:'http://localhost:5001/'\n                            },{\n                                label:'opra',\n                                value:'https://opra.cs.rpi.edu/polls/voting'\n                            }\n                        ]\n                        \n    \n    return(\n    <Modal title=\"Admin Settings\" visible={state.modalvisible} onCancel={handleClose} footer={null}>\n        <Row style={{ alignItems: \"center\" }}>\n            <Col span={8}>\n                <Text strong={true}>Choose a server</Text>\n            </Col>\n            <Col span={8}>\n                <Radio.Group\n                    options={serveroptions}\n                    onChange={e=>onChange('server',e)}\n                    value={state.settings.server}\n                    optionType=\"button\"\n                    buttonStyle=\"solid\"\n                />\n            </Col>\n        </Row>\n    </Modal>\n    )\n}\n\nexport default AdminSettings","import { useState } from 'react';\nimport Footer from './components/footer/Footer.js'\nimport StartPage from './pages/startpage/StartPage.js';\n// import { HashRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport 'antd/dist/antd.css';\n\nconst App = () => {\n\tconst [state, setstate] = useState({server:'https://voting-demo-backend.herokuapp.com'})\n\n\treturn (\n\t\t<div>\n\t\t\t{/* <Router basename={process.env.PUBLIC_URL}>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/result\" component={ResultPage} />\n\t\t\t\t\t<Route exact path=\"/\" component={StartPage} />\n\t\t\t\t</Switch>\n\t\t\t</Router> */}\n\t\t\t<StartPage settings={state} setSettings={setstate}/>\n\t\t\t<Footer />\n\t\t</div>\n\t);\n}\n\nexport const server = 'https://opra.cs.rpi.edu/polls/voting'\n\n// for local debugging\n// export const server = 'http://127.0.0.1:5001' \n\n// for heroku server\n// export const server = 'https://voting-demo-backend.herokuapp.com'\n\n\nexport default App","import { usePromiseTracker } from \"react-promise-tracker\";\nimport Loader from 'react-loader-spinner';\n\nimport './LoadSpinner.css'\n\nconst LoadSpinner = props => {\n  const { promiseInProgress } = usePromiseTracker()\n  return(\n    promiseInProgress && \n        <div className=\"LoadSpinner\">\n            <Loader type=\"ThreeDots\" color=\"#9ef3ec\" height=\"100\" width=\"200\"></Loader>\n        </div>\n  )\n}\n\nexport default LoadSpinner","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport LoadSpinner from './components/loadspinner/LoadSpinner'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <LoadSpinner />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}